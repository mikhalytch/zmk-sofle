#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    scroll_encoder_rgb: scroll_encoder_rgb {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRD>, <&rgb_ug RGB_BRI>;

        tap-ms = <100>;
    };

    hmlt: homerow_mods_left_timeless {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT_TIMELESS";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <300>;
        hold-trigger-key-positions = <59 60 61 62 63 7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 10 11 12 23 24 25 36 37 38 49 50 51 63>;
        quick-tap-ms = <185>;
        require-prior-idle-ms = <125>;
        flavor = "balanced";
        hold-trigger-on-release;
    };

    hmltf: homerow_mods_left_timeless_fast {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT_TIMELESS_FAST";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <190>;
        hold-trigger-key-positions = <59 60 61 62 63 7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 10 11 12 23 24 25 36 37 38 49 50 51 63>;
        quick-tap-ms = <185>;
        require-prior-idle-ms = <125>;
        flavor = "balanced";
    };

    hmrt: homerow_mods_right_timeless {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_RIGHT_TIMELESS";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <300>;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57>;
        quick-tap-ms = <185>;
        require-prior-idle-ms = <125>;
        flavor = "balanced";
        hold-trigger-on-release;
    };

    hmrtf: homerow_mods_right_timeless_fst {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_RIGHT_TIMELESS_FAST";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <190>;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57>;
        quick-tap-ms = <185>;
        require-prior-idle-ms = <125>;
        flavor = "balanced";
    };

    ltr: layer_tap_with_repeat {
        compatible = "zmk,behavior-hold-tap";
        label = "LAYER_TAP_WITH_REPEAT";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <185>;
        flavor = "balanced";
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        L0_base {
            bindings = <
&kp EQUAL         &kp N1            &kp N2            &kp N3               &kp N4                &kp N5        &mmv MOVE_UP     &kp N6            &kp N7                 &kp N8                &kp N9            &kp N0                &kp MINUS
&kp LEFT_BRACKET  &kp Q             &kp W             &kp E                &kp R                 &kp T         &mmv MOVE_DOWN   &kp Y             &kp U                  &kp I                 &kp O             &kp P                 &kp RIGHT_BRACKET
&kp ESCAPE        &hmlt LEFT_GUI A  &hmlt LEFT_ALT S  &hmltf LEFT_SHIFT D  &hmlt LEFT_CONTROL F  &kp G         &mmv MOVE_LEFT   &kp H             &hmrt RIGHT_CONTROL J  &hmrtf RIGHT_SHIFT K  &hmrt LEFT_ALT L  &hmrt RIGHT_GUI SEMI  &kp APOS
&kp GRAVE         &kp Z             &kp X             &kp C                &kp V                 &kp B         &mmv MOVE_RIGHT  &kp N             &kp M                  &kp COMMA             &kp DOT           &kp FSLH              &kp BACKSLASH
&kp C_MUTE        &trans            &trans            &trans               &kp SPACE             &ltr 1 TAB    &mkp LCLK        &ltr 2 BACKSPACE  &kp ENTER              &kp DELETE            &trans            &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "base";
        };

        L1_F {
            bindings = <
&kp F1        &kp F2  &kp F3          &kp F4          &kp F5           &kp F6    &mmv MOVE_UP     &kp F7           &kp F8           &kp F9           &kp F10          &kp F11          &kp F12
&trans        &trans  &kp HOME        &kp UP_ARROW    &kp PAGE_UP      &trans    &mmv MOVE_DOWN   &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_SUBTRACT  &trans
&kp CAPSLOCK  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans    &mmv MOVE_LEFT   &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS      &trans
&trans        &trans  &kp END         &kp DOWN_ARROW  &kp PAGE_DOWN    &trans    &mmv MOVE_RIGHT  &trans           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER     &trans
&mkp RCLK     &trans  &trans          &trans          &trans           &trans    &mkp LCLK        &trans           &trans           &kp KP_NUMBER_0  &kp KP_DOT       &trans
            >;

            display-name = "F, arr, numpad";
            sensor-bindings = <&scroll_encoder>;
        };

        L2_fn {
            display-name = "fn, rgb";
            bindings = <
&kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans           &trans           &trans           &kp K_SLEEP        &mmv MOVE_UP     &kp K_PREV       &kp K_PLAY_PAUSE  &kp K_NEXT  &kp K_MUTE  &kp K_VOLUME_DOWN  &kp K_VOLUME_UP
&trans                &trans                &mkp LCLK        &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &trans           &trans            &trans      &trans      &trans             &trans
&trans                &trans                &trans           &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &trans           &trans            &trans      &trans      &trans             &trans
&rgb_ug RGB_OFF       &rgb_ug RGB_ON        &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD   &trans      &trans      &trans             &trans
&rgb_ug RGB_TOG       &trans                &trans           &trans           &trans           &trans             &mkp LCLK        &trans           &trans            &trans      &trans      &trans
            >;

            sensor-bindings = <&scroll_encoder_rgb>;
        };

        L3_sys {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans  &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans  &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans  &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "keeb sys";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
